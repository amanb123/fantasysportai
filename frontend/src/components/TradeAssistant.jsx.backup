import { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { useSleeper } from '../contexts/SleeperContext';
import { 
  startTradeAnalysis, 
  getTradeAnalysisResult, 
  getRecentTrades,
  getUserTradeAnalyses 
} from '../services/api';

export default function TradeAssistant() {
  const navigate = useNavigate();
  const { sleeperSession, selectedLeague, userRoster } = useSleeper();

  // Redirect if no session
  useEffect(() => {
    if (!sleeperSession || !selectedLeague || !userRoster) {
      navigate('/');
    }
  }, [sleeperSession, selectedLeague, userRoster, navigate]);

  if (!sleeperSession || !selectedLeague || !userRoster) {
    return null;
  }

  const leagueId = selectedLeague.league_id;
  const sleeperUserId = sleeperSession.user_id;
  const userRosterId = userRoster.roster_id;
  const [step, setStep] = useState(1); // 1: Setup, 2: Analyzing, 3: Results
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  
  // Form state
  const [opponentRosterId, setOpponentRosterId] = useState('');
  const [playersOut, setPlayersOut] = useState(['']);
  const [playersIn, setPlayersIn] = useState(['']);
  
  // Analysis state
  const [sessionId, setSessionId] = useState(null);
  const [analysisResult, setAnalysisResult] = useState(null);
  const [pollingInterval, setPollingInterval] = useState(null);
  
  // Reference data
  const [recentTrades, setRecentTrades] = useState([]);
  const [analysisHistory, setAnalysisHistory] = useState([]);

  // Load reference data on mount
  useEffect(() => {
    loadRecentTrades();
    loadAnalysisHistory();
  }, [leagueId, sleeperUserId]);

  // Cleanup polling on unmount
  useEffect(() => {
    return () => {
      if (pollingInterval) {
        clearInterval(pollingInterval);
      }
    };
  }, [pollingInterval]);

  const loadRecentTrades = async () => {
    try {
      const trades = await getRecentTrades(leagueId, 5);
      setRecentTrades(trades);
    } catch (err) {
      console.error('Error loading recent trades:', err);
    }
  };

  const loadAnalysisHistory = async () => {
    try {
      const history = await getUserTradeAnalyses(sleeperUserId, leagueId, 10);
      setAnalysisHistory(history.sessions || []);
    } catch (err) {
      console.error('Error loading analysis history:', err);
    }
  };

  const addPlayerField = (type) => {
    if (type === 'out') {
      setPlayersOut([...playersOut, '']);
    } else {
      setPlayersIn([...playersIn, '']);
    }
  };

  const removePlayerField = (type, index) => {
    if (type === 'out') {
      setPlayersOut(playersOut.filter((_, i) => i !== index));
    } else {
      setPlayersIn(playersIn.filter((_, i) => i !== index));
    }
  };

  const updatePlayer = (type, index, value) => {
    if (type === 'out') {
      const updated = [...playersOut];
      updated[index] = value;
      setPlayersOut(updated);
    } else {
      const updated = [...playersIn];
      updated[index] = value;
      setPlayersIn(updated);
    }
  };

  const handleStartAnalysis = async () => {
    setError(null);
    
    // Validation
    const validPlayersOut = playersOut.filter(p => p.trim());
    const validPlayersIn = playersIn.filter(p => p.trim());
    
    if (!opponentRosterId || validPlayersOut.length === 0 || validPlayersIn.length === 0) {
      setError('Please fill in all required fields');
      return;
    }

    setLoading(true);
    setStep(2);

    try {
      const response = await startTradeAnalysis({
        league_id: leagueId,
        sleeper_user_id: sleeperUserId,
        user_roster_id: parseInt(userRosterId),
        opponent_roster_id: parseInt(opponentRosterId),
        user_players_out: validPlayersOut,
        user_players_in: validPlayersIn
      });

      setSessionId(response.session_id);
      
      // Start polling for results
      const interval = setInterval(async () => {
        try {
          const result = await getTradeAnalysisResult(response.session_id);
          
          if (result.status === 'completed' || result.status === 'failed') {
            clearInterval(interval);
            setPollingInterval(null);
            setAnalysisResult(result);
            setStep(3);
            setLoading(false);
          }
        } catch (err) {
          console.error('Polling error:', err);
        }
      }, 2000); // Poll every 2 seconds

      setPollingInterval(interval);
      
    } catch (err) {
      setError(err.message || 'Failed to start analysis');
      setLoading(false);
      setStep(1);
    }
  };

  const handleReset = () => {
    setStep(1);
    setSessionId(null);
    setAnalysisResult(null);
    setError(null);
    setOpponentRosterId('');
    setPlayersOut(['']);
    setPlayersIn(['']);
    loadAnalysisHistory();
  };

  const getFavorabilityColor = (score) => {
    if (score === null || score === undefined) return 'text-gray-500';
    if (score >= 70) return 'text-green-600';
    if (score >= 55) return 'text-green-500';
    if (score >= 46) return 'text-yellow-500';
    if (score >= 31) return 'text-orange-500';
    return 'text-red-600';
  };

  const getFavorabilityLabel = (score) => {
    if (score === null || score === undefined) return 'Unknown';
    if (score >= 70) return 'Strongly Favorable';
    if (score >= 55) return 'Favorable';
    if (score >= 46) return 'Fair Trade';
    if (score >= 31) return 'Unfavorable';
    return 'Strongly Unfavorable';
  };

  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="max-w-7xl mx-auto px-4">
        <div className="bg-white rounded-lg shadow-lg p-6">
          {/* Header */}
          <div className="mb-8">
            <h1 className="text-3xl font-bold text-gray-900 mb-2">
              🤖 AI Trade Assistant
            </h1>
            <p className="text-gray-600">
              Get AI-powered analysis of your proposed trades with detailed insights and recommendations
            </p>
          </div>

          {/* Error Display */}
          {error && (
            <div className="mb-6 bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded">
              {error}
            </div>
          )}

          {/* Step 1: Trade Setup */}
          {step === 1 && (
            <div className="space-y-6">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Opponent Roster ID
                </label>
                <input
                  type="number"
                  value={opponentRosterId}
                  onChange={(e) => setOpponentRosterId(e.target.value)}
                  className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  placeholder="Enter opponent's roster ID"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Players You're Trading Away
                </label>
                {playersOut.map((player, index) => (
                  <div key={index} className="flex gap-2 mb-2">
                    <input
                      type="text"
                      value={player}
                      onChange={(e) => updatePlayer('out', index, e.target.value)}
                      className="flex-1 px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                      placeholder="Player ID (e.g., 1054 for Luka)"
                    />
                    {playersOut.length > 1 && (
                      <button
                        onClick={() => removePlayerField('out', index)}
                        className="px-3 py-2 text-red-600 hover:bg-red-50 rounded-lg"
                      >
                        ✕
                      </button>
                    )}
                  </div>
                ))}
                <button
                  onClick={() => addPlayerField('out')}
                  className="text-sm text-blue-600 hover:text-blue-700 font-medium"
                >
                  + Add Player
                </button>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Players You're Receiving
                </label>
                {playersIn.map((player, index) => (
                  <div key={index} className="flex gap-2 mb-2">
                    <input
                      type="text"
                      value={player}
                      onChange={(e) => updatePlayer('in', index, e.target.value)}
                      className="flex-1 px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                      placeholder="Player ID (e.g., 1308 for Kawhi)"
                    />
                    {playersIn.length > 1 && (
                      <button
                        onClick={() => removePlayerField('in', index)}
                        className="px-3 py-2 text-red-600 hover:bg-red-50 rounded-lg"
                      >
                        ✕
                      </button>
                    )}
                  </div>
                ))}
                <button
                  onClick={() => addPlayerField('in')}
                  className="text-sm text-blue-600 hover:text-blue-700 font-medium"
                >
                  + Add Player
                </button>
              </div>

              <button
                onClick={handleStartAnalysis}
                disabled={loading}
                className="w-full bg-blue-600 text-white py-3 px-6 rounded-lg hover:bg-blue-700 disabled:bg-gray-400 font-medium text-lg"
              >
                {loading ? 'Analyzing...' : 'Analyze Trade'}
              </button>

              {/* Recent Trades Reference */}
              {recentTrades.length > 0 && (
                <div className="mt-8 border-t pt-6">
                  <h3 className="text-lg font-semibold text-gray-900 mb-4">
                    Recent Trades in Your League
                  </h3>
                  <div className="space-y-2">
                    {recentTrades.map((trade, idx) => (
                      <div key={idx} className="text-sm text-gray-600 bg-gray-50 p-3 rounded">
                        {trade.description}
                      </div>
                    ))}
                  </div>
                </div>
              )}

              {/* Analysis History */}
              {analysisHistory.length > 0 && (
                <div className="mt-8 border-t pt-6">
                  <h3 className="text-lg font-semibold text-gray-900 mb-4">
                    Your Recent Analyses
                  </h3>
                  <div className="space-y-2">
                    {analysisHistory.slice(0, 5).map((session) => (
                      <div key={session.session_id} className="text-sm bg-gray-50 p-3 rounded flex justify-between">
                        <span className="text-gray-600">
                          {new Date(session.created_at).toLocaleDateString()}
                        </span>
                        <span className={`font-medium ${getFavorabilityColor(session.favorability_score)}`}>
                          {session.favorability_score ? `${session.favorability_score}/100` : 'N/A'}
                        </span>
                      </div>
                    ))}
                  </div>
                </div>
              )}
            </div>
          )}

          {/* Step 2: Analyzing */}
          {step === 2 && (
            <div className="text-center py-12">
              <div className="inline-block animate-spin rounded-full h-16 w-16 border-4 border-blue-500 border-t-transparent"></div>
              <h2 className="text-xl font-semibold text-gray-900 mt-4">
                Analyzing Your Trade...
              </h2>
              <p className="text-gray-600 mt-2">
                Fetching player stats, league settings, and upcoming schedules
              </p>
              <p className="text-sm text-gray-500 mt-1">
                This usually takes 10-15 seconds
              </p>
            </div>
          )}

          {/* Step 3: Results */}
          {step === 3 && analysisResult && (
            <div className="space-y-6">
              {/* Favorability Score */}
              <div className="bg-gradient-to-r from-blue-50 to-purple-50 rounded-lg p-6 text-center">
                <div className="text-sm text-gray-600 mb-2">Trade Favorability Score</div>
                <div className={`text-6xl font-bold ${getFavorabilityColor(analysisResult.favorability_score)}`}>
                  {analysisResult.favorability_score !== null ? analysisResult.favorability_score : 'N/A'}
                  <span className="text-2xl">/100</span>
                </div>
                <div className={`text-lg font-medium mt-2 ${getFavorabilityColor(analysisResult.favorability_score)}`}>
                  {getFavorabilityLabel(analysisResult.favorability_score)}
                </div>
              </div>

              {/* Recommendation */}
              {analysisResult.analysis_result?.recommendation && (
                <div className="bg-yellow-50 border-l-4 border-yellow-400 p-4">
                  <div className="flex">
                    <div className="flex-shrink-0">
                      <span className="text-2xl">💡</span>
                    </div>
                    <div className="ml-3">
                      <h3 className="text-sm font-medium text-yellow-800">Recommendation</h3>
                      <p className="mt-1 text-sm text-yellow-700">
                        {analysisResult.analysis_result.recommendation}
                      </p>
                    </div>
                  </div>
                </div>
              )}

              {/* Reasoning */}
              {analysisResult.analysis_result?.reasoning && (
                <div className="bg-blue-50 rounded-lg p-4">
                  <h3 className="font-semibold text-gray-900 mb-2">Analysis Reasoning</h3>
                  <p className="text-gray-700">{analysisResult.analysis_result.reasoning}</p>
                </div>
              )}

              {/* Pros and Cons */}
              <div className="grid md:grid-cols-2 gap-6">
                {/* Pros */}
                <div className="bg-green-50 rounded-lg p-4">
                  <h3 className="font-semibold text-green-900 mb-3 flex items-center">
                    <span className="text-xl mr-2">✅</span>
                    Pros ({analysisResult.analysis_result?.pros?.length || 0})
                  </h3>
                  <ul className="space-y-2">
                    {analysisResult.analysis_result?.pros?.map((pro, idx) => (
                      <li key={idx} className="text-sm text-green-800 flex">
                        <span className="mr-2">•</span>
                        <span>{pro}</span>
                      </li>
                    )) || <li className="text-sm text-green-600 italic">No pros listed</li>}
                  </ul>
                </div>

                {/* Cons */}
                <div className="bg-red-50 rounded-lg p-4">
                  <h3 className="font-semibold text-red-900 mb-3 flex items-center">
                    <span className="text-xl mr-2">❌</span>
                    Cons ({analysisResult.analysis_result?.cons?.length || 0})
                  </h3>
                  <ul className="space-y-2">
                    {analysisResult.analysis_result?.cons?.map((con, idx) => (
                      <li key={idx} className="text-sm text-red-800 flex">
                        <span className="mr-2">•</span>
                        <span>{con}</span>
                      </li>
                    )) || <li className="text-sm text-red-600 italic">No cons listed</li>}
                  </ul>
                </div>
              </div>

              {/* Simulation Results */}
              {analysisResult.simulation_result && (
                <div className="bg-purple-50 rounded-lg p-4">
                  <h3 className="font-semibold text-purple-900 mb-3">Matchup Simulation</h3>
                  <p className="text-sm text-purple-700">
                    Simulation results will appear here once available
                  </p>
                </div>
              )}

              {/* Actions */}
              <div className="flex gap-4">
                <button
                  onClick={handleReset}
                  className="flex-1 bg-gray-200 text-gray-800 py-3 px-6 rounded-lg hover:bg-gray-300 font-medium"
                >
                  Analyze Another Trade
                </button>
                <button
                  onClick={() => window.print()}
                  className="bg-blue-600 text-white py-3 px-6 rounded-lg hover:bg-blue-700 font-medium"
                >
                  📄 Save/Print
                </button>
              </div>

              {/* Metadata */}
              <div className="text-xs text-gray-500 text-center pt-4 border-t">
                Analysis completed at {new Date(analysisResult.completed_at || analysisResult.created_at).toLocaleString()}
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}
