# Roster Ranking Configuration
ROSTER_RANKING_CACHE_TTL=3600
ROSTER_RANKING_CACHE_KEY_PREFIX=roster_ranking
ROSTER_RANKING_ENABLE_CATEGORY_BREAKDOWN=true
ROSTER_RANKING_MAX_PLAYERS_TO_ANALYZE=15
# Rankings cache for 1 hour (stats don't change frequently during the day)
# Category breakdown shows strength in each scoring category
# Max players limit prevents excessive MCP calls for large rosters
# Ollama Configuration
OLLAMA_HOST=http://localhost:11434
OLLAMA_MODEL=llama2
OLLAMA_TIMEOUT=300

# Application Environment
ENVIRONMENT=development
LOG_LEVEL=INFO

# API Configuration
API_HOST=0.0.0.0
API_PORT=3002

# CORS Origins (comma-separated list)
CORS_ORIGINS=http://localhost:3000,http://localhost:3001,http://localhost:5173

# Database Configuration - Neon PostgreSQL
# Replace with your actual Neon connection string from your Neon dashboard
# Format: postgresql://user:password@ep-xxx-xxx.us-east-1.aws.neon.tech/database?sslmode=require
DATABASE_URL=postgresql://neondb_owner:npg_zXRLpCq1FQS8@ep-red-lab-adommgzg-pooler.c-2.us-east-1.aws.neon.tech/neondb?sslmode=require&channel_binding=require
DATABASE_ECHO=False

# Session and Data Retention
SESSION_RETENTION_HOURS=168

# Fantasy Basketball Settings
SALARY_CAP=100000000

# Agent Configuration
AGENT_MAX_TURNS=10
AGENT_TEMPERATURE=0.7

# Authentication Configuration
# WARNING: Use a strong random secret key in production (generate with: openssl rand -hex 32)
SECRET_KEY=your-super-secret-jwt-key-change-this-in-production
ALGORITHM=HS256
ACCESS_TOKEN_EXPIRE_MINUTES=30

# Sleeper API Configuration
SLEEPER_API_BASE_URL=https://api.sleeper.app/v1
SLEEPER_API_TIMEOUT=10

# Redis Configuration
# Redis is required for Sleeper player caching
REDIS_HOST=localhost
REDIS_PORT=6379
REDIS_DB=0
REDIS_PASSWORD=
REDIS_SSL=false
# Cache TTL is 24 hours per Sleeper API recommendations

# Sleeper Season Configuration
# Default NBA season year for Sleeper API (2024 = 2024-25 season)
SLEEPER_DEFAULT_SEASON=2024
# Cache TTL for season lookup (seconds)
SLEEPER_SEASON_CACHE_TTL=86400
SLEEPER_PLAYERS_CACHE_TTL=86400
SLEEPER_PLAYERS_CACHE_KEY=sleeper:nba:players

# Sleeper League Data Cache Configuration
# Cache TTL settings control how long data is stored before requiring refresh
SLEEPER_LEAGUE_CACHE_TTL=1800
SLEEPER_ROSTER_CACHE_TTL=1800
SLEEPER_TRANSACTION_CACHE_TTL=3600
SLEEPER_MATCHUP_CACHE_TTL=3600

# Sleeper Cache Key Prefixes
# These prefixes are used to organize cached data in Redis
SLEEPER_LEAGUE_CACHE_KEY_PREFIX=sleeper:league
SLEEPER_ROSTER_CACHE_KEY_PREFIX=sleeper:rosters
SLEEPER_TRANSACTION_CACHE_KEY_PREFIX=sleeper:transactions
SLEEPER_MATCHUP_CACHE_KEY_PREFIX=sleeper:matchups

# Sleeper Polling Configuration
# Controls how much historical data to fetch when refreshing
SLEEPER_TRANSACTION_ROUNDS_TO_FETCH=5
SLEEPER_MATCHUP_WEEKS_TO_FETCH=3

# NBA Stats Integration
# Enable/disable NBA stats integration for schedule and player info
NBA_STATS_ENABLED=true
NBA_CDN_BASE_URL=https://cdn.nba.com/static/json
NBA_CDN_TIMEOUT=10

# NBA Cache Configuration
# Schedule cache refreshes every 12 hours (games don't change frequently)
# Player info cache refreshes daily (bio data is relatively static)
NBA_SCHEDULE_CACHE_TTL=43200
NBA_PLAYER_INFO_CACHE_TTL=86400
NBA_SCHEDULE_CACHE_KEY=nba:schedule
NBA_PLAYER_INFO_CACHE_KEY_PREFIX=nba:player_info

# NBA Data Refresh Configuration
# Refresh hours are in UTC timezone (2 AM UTC, 3 AM UTC)
# Current season should be updated annually (2024 = 2024-25 season)
NBA_SCHEDULE_REFRESH_HOUR=2
NBA_PLAYER_INFO_REFRESH_HOUR=3
NBA_CURRENT_SEASON=2024

# NBA Historical Stats Configuration
# Historical data doesn't change, cache for 7 days (604800 seconds)
NBA_HISTORICAL_STATS_CACHE_TTL=604800
NBA_HISTORICAL_STATS_CACHE_KEY_PREFIX=nba:historical
# Delay between nba_api requests to avoid rate limiting (0.6 seconds)
NBA_API_REQUEST_DELAY=0.6

# Roster Chat Configuration
# Max messages to include in LLM context (manages token usage)
ROSTER_CHAT_MAX_HISTORY_MESSAGES=10
# Estimated max tokens for context (league rules + roster + historical stats)
ROSTER_CHAT_MAX_CONTEXT_TOKENS=3000
# Enable on-demand historical stats fetching when user asks historical questions
ROSTER_CHAT_ENABLE_HISTORICAL_STATS=true
# Max seasons to fetch for historical queries (prevents excessive API calls)
ROSTER_CHAT_HISTORICAL_STATS_MAX_SEASONS=3
