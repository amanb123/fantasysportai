#!/usr/bin/env python3
"""
Trade Assistant - Complete End-to-End User Flow Test
Tests the full workflow with new UI improvements:
1. Fetch league teams with proper names
2. Select opponent team(s)
3. Select specific players (not all pre-selected)
4. Submit for AI analysis
5. Get LLM-generated recommendations
6. Run matchup simulation
7. View complete results
"""

import requests
import time
import json

BASE_URL = "http://localhost:3002"

# Test configuration
TEST_CONFIG = {
    "league_id": "1265480188934750208",
    "sleeper_user_id": "730568793184653312",
    "user_roster_id": 1,
}

def print_section(title, char="="):
    """Print a formatted section header"""
    print("\n" + char*80)
    print(f"  {title}")
    print(char*80)

def print_subsection(title):
    """Print a formatted subsection"""
    print(f"\n{'‚îÄ'*80}")
    print(f"  {title}")
    print(f"{'‚îÄ'*80}")

def test_step_1_load_teams():
    """Step 1: Load all teams in league with proper display names"""
    print_section("STEP 1: LOAD LEAGUE TEAMS", "=")
    
    print("\nüìã Fetching league rosters and users...")
    
    try:
        # Fetch rosters
        rosters_response = requests.get(
            f"{BASE_URL}/api/sleeper/leagues/{TEST_CONFIG['league_id']}/rosters/cached"
        )
        
        if rosters_response.status_code != 200:
            print(f"‚ùå FAILED to fetch rosters: {rosters_response.text}")
            return None, None
        
        rosters = rosters_response.json()
        print(f"‚úÖ Fetched {len(rosters)} rosters")
        
        # Fetch league users
        users_response = requests.get(
            f"{BASE_URL}/api/sleeper/leagues/{TEST_CONFIG['league_id']}/users"
        )
        
        if users_response.status_code != 200:
            print(f"‚ùå FAILED to fetch users: {users_response.text}")
            return rosters, {}
        
        users = users_response.json()
        print(f"‚úÖ Fetched {len(users)} users")
        
        # Create user lookup map
        user_map = {u['user_id']: u for u in users}
        
        # Display teams with proper names
        print("\nüèÄ Available Teams:")
        print(f"{'‚îÄ'*80}")
        
        for roster in rosters:
            roster_id = roster['roster_id']
            owner_id = roster['owner_id']
            player_count = len(roster.get('players', []))
            
            # Get team name
            user = user_map.get(owner_id, {})
            team_name = (user.get('metadata', {}).get('team_name') or 
                        user.get('display_name') or 
                        user.get('username') or 
                        f"Team {roster_id}")
            
            is_user = roster_id == TEST_CONFIG['user_roster_id']
            status = "üë§ YOU" if is_user else "üéØ Opponent"
            
            print(f"  {status:12} | Roster {roster_id:2} | {team_name:20} | {player_count:2} players")
        
        print(f"{'‚îÄ'*80}")
        
        return rosters, user_map
        
    except Exception as e:
        print(f"‚ùå ERROR: {str(e)}")
        return None, None

def test_step_2_select_opponent(rosters, user_map):
    """Step 2: User selects opponent team(s)"""
    print_section("STEP 2: SELECT OPPONENT TEAM", "=")
    
    if not rosters:
        print("‚ùå No rosters available")
        return None
    
    # Find user's roster
    user_roster = next((r for r in rosters if r['roster_id'] == TEST_CONFIG['user_roster_id']), None)
    if not user_roster:
        print("‚ùå User roster not found")
        return None
    
    # Get opponent rosters (exclude user's roster)
    opponent_rosters = [r for r in rosters if r['roster_id'] != TEST_CONFIG['user_roster_id']]
    
    # Select first opponent (simulating user click)
    selected_opponent = opponent_rosters[0]
    opponent_roster_id = selected_opponent['roster_id']
    opponent_owner_id = selected_opponent['owner_id']
    
    # Get opponent name
    opponent_user = user_map.get(opponent_owner_id, {})
    opponent_name = (opponent_user.get('metadata', {}).get('team_name') or 
                    opponent_user.get('display_name') or 
                    opponent_user.get('username') or 
                    f"Team {opponent_roster_id}")
    
    print(f"\nüëâ User selects: {opponent_name} (Roster {opponent_roster_id})")
    print(f"   Players available: {len(selected_opponent.get('players', []))}")
    
    return selected_opponent

def test_step_3_fetch_players(rosters, user_map):
    """Step 3: Fetch player details for display"""
    print_section("STEP 3: FETCH PLAYER DETAILS", "=")
    
    print("\nüì¶ Fetching player names for all rosters...")
    
    try:
        # Collect all player IDs
        all_player_ids = set()
        for roster in rosters:
            all_player_ids.update(roster.get('players', []))
        
        print(f"   Total unique players: {len(all_player_ids)}")
        
        # Fetch player details (note: this endpoint expects an array body)
        response = requests.post(
            f"{BASE_URL}/api/sleeper/players/bulk",
            json=list(all_player_ids)  # Send as array
        )
        
        if response.status_code == 200:
            data = response.json()
            players = data.get('players', {})
            print(f"‚úÖ Fetched details for {len(players)} players")
            return players
        else:
            print(f"‚ö†Ô∏è  Player details not available (status {response.status_code})")
            print("   Will use player IDs instead")
            return {}
            
    except Exception as e:
        print(f"‚ö†Ô∏è  Error fetching players: {str(e)}")
        print("   Will use player IDs instead")
        return {}

def test_step_4_select_players(rosters, opponent_roster, players):
    """Step 4: User selects specific players (none pre-selected)"""
    print_section("STEP 4: SELECT PLAYERS FOR TRADE", "=")
    
    # Get user roster
    user_roster = next((r for r in rosters if r['roster_id'] == TEST_CONFIG['user_roster_id']), None)
    
    if not user_roster:
        print("‚ùå User roster not found")
        return None, None
    
    print("\nüì§ Players You're Trading Away (Your Roster):")
    print(f"{'‚îÄ'*80}")
    print(f"   {'ID':6} | {'Player Name':30} | {'Status':10}")
    print(f"{'‚îÄ'*80}")
    
    # Show first 5 players from user roster
    user_player_ids = user_roster.get('players', [])[:10]
    for pid in user_player_ids:
        player = players.get(pid, {})
        name = player.get('name', f'Player {pid}')
        print(f"   {pid:6} | {name:30} | Available")
    
    # User selects 2 players to trade away
    selected_out = user_player_ids[:2]
    print(f"\nüëâ User selects to trade away:")
    for pid in selected_out:
        player = players.get(pid, {})
        name = player.get('name', f'Player {pid}')
        team = player.get('team', 'N/A')
        positions = ','.join(player.get('positions', []) or [])
        print(f"   ‚úì {name} ({team}) - {positions}")
    
    print("\nüì• Players You're Receiving (Opponent Roster):")
    print(f"{'‚îÄ'*80}")
    print(f"   {'ID':6} | {'Player Name':30} | {'Status':10}")
    print(f"{'‚îÄ'*80}")
    
    # Show first 5 players from opponent roster
    opponent_player_ids = opponent_roster.get('players', [])[:10]
    for pid in opponent_player_ids:
        player = players.get(pid, {})
        name = player.get('name', f'Player {pid}')
        print(f"   {pid:6} | {name:30} | Available")
    
    # User selects 2 players to receive
    selected_in = opponent_player_ids[:2]
    print(f"\nüëâ User selects to receive:")
    for pid in selected_in:
        player = players.get(pid, {})
        name = player.get('name', f'Player {pid}')
        team = player.get('team', 'N/A')
        positions = ','.join(player.get('positions', []) or [])
        print(f"   ‚úì {name} ({team}) - {positions}")
    
    return selected_out, selected_in

def test_step_5_submit_analysis(opponent_roster_id, players_out, players_in):
    """Step 5: Submit trade for AI analysis"""
    print_section("STEP 5: SUBMIT FOR AI ANALYSIS", "=")
    
    print("\nü§ñ Submitting trade to AI for analysis...")
    
    trade_request = {
        "league_id": TEST_CONFIG['league_id'],
        "sleeper_user_id": TEST_CONFIG['sleeper_user_id'],
        "user_roster_id": TEST_CONFIG['user_roster_id'],
        "opponent_roster_id": opponent_roster_id,
        "user_players_out": players_out,
        "user_players_in": players_in
    }
    
    print(f"\nüìã Trade Details:")
    print(f"   League: {TEST_CONFIG['league_id']}")
    print(f"   Your Roster: {TEST_CONFIG['user_roster_id']}")
    print(f"   Opponent Roster: {opponent_roster_id}")
    print(f"   Giving up: {len(players_out)} players")
    print(f"   Receiving: {len(players_in)} players")
    
    try:
        response = requests.post(
            f"{BASE_URL}/api/trade-assistant/analyze",
            json=trade_request
        )
        
        if response.status_code != 200:
            print(f"‚ùå FAILED: {response.text}")
            return None
        
        data = response.json()
        session_id = data.get('session_id')
        
        print(f"‚úÖ Analysis started!")
        print(f"   Session ID: {session_id}")
        
        return session_id
        
    except Exception as e:
        print(f"‚ùå ERROR: {str(e)}")
        return None

def test_step_6_wait_for_analysis(session_id):
    """Step 6: Poll for LLM analysis results"""
    print_section("STEP 6: WAIT FOR LLM ANALYSIS", "=")
    
    print("\n‚è≥ Polling for analysis results...")
    print("   AI is analyzing player stats, league settings, and trade impact...")
    
    max_attempts = 15
    start_time = time.time()
    
    for attempt in range(1, max_attempts + 1):
        try:
            response = requests.get(
                f"{BASE_URL}/api/trade-assistant/analysis/{session_id}"
            )
            
            if response.status_code != 200:
                print(f"‚ùå HTTP {response.status_code}")
                return None
            
            data = response.json()
            status = data.get('status')
            
            elapsed = time.time() - start_time
            print(f"   [{attempt:2}] {elapsed:5.1f}s - Status: {status}")
            
            if status == 'completed':
                print(f"\n‚úÖ Analysis completed in {elapsed:.1f} seconds!")
                return data
            elif status == 'failed':
                print(f"\n‚ùå Analysis failed: {data.get('error', 'Unknown error')}")
                return None
            
            time.sleep(2)
            
        except Exception as e:
            print(f"‚ùå ERROR: {str(e)}")
            return None
    
    print(f"\n‚ùå TIMEOUT: Analysis did not complete in {max_attempts * 2} seconds")
    return None

def test_step_7_display_results(analysis_result):
    """Step 7: Display LLM-generated recommendations"""
    print_section("STEP 7: VIEW AI RECOMMENDATIONS", "=")
    
    if not analysis_result:
        print("‚ùå No analysis results available")
        return False
    
    # Extract data
    favorability_score = analysis_result.get('favorability_score')
    analysis = analysis_result.get('analysis_result', {})
    pros = analysis.get('pros', [])
    cons = analysis.get('cons', [])
    reasoning = analysis.get('reasoning', '')
    recommendation = analysis.get('recommendation', '')
    
    # Display favorability score
    print(f"\n{'='*80}")
    print(f"  TRADE FAVORABILITY SCORE")
    print(f"{'='*80}")
    
    if favorability_score is not None:
        print(f"\n  üéØ Score: {favorability_score}/100")
        
        # Add color-coded label
        if favorability_score >= 70:
            label = "‚úÖ STRONGLY FAVORABLE"
        elif favorability_score >= 55:
            label = "‚úÖ FAVORABLE"
        elif favorability_score >= 46:
            label = "‚öñÔ∏è  FAIR TRADE"
        elif favorability_score >= 31:
            label = "‚ö†Ô∏è  UNFAVORABLE"
        else:
            label = "‚ùå STRONGLY UNFAVORABLE"
        
        print(f"  {label}")
    else:
        print(f"\n  üéØ Score: N/A")
    
    # Display recommendation
    if recommendation:
        print(f"\n{'‚îÄ'*80}")
        print(f"  üí° AI RECOMMENDATION")
        print(f"{'‚îÄ'*80}")
        print(f"  {recommendation}")
    
    # Display reasoning
    if reasoning:
        print(f"\n{'‚îÄ'*80}")
        print(f"  üìù DETAILED REASONING")
        print(f"{'‚îÄ'*80}")
        # Wrap text at 76 characters
        words = reasoning.split()
        line = "  "
        for word in words:
            if len(line) + len(word) + 1 > 78:
                print(line)
                line = "  " + word
            else:
                line += " " + word if line != "  " else word
        if line.strip():
            print(line)
    
    # Display pros
    print(f"\n{'‚îÄ'*80}")
    print(f"  ‚úÖ PROS ({len(pros)})")
    print(f"{'‚îÄ'*80}")
    if pros:
        for i, pro in enumerate(pros, 1):
            print(f"  {i}. {pro}")
    else:
        print("  No pros identified")
    
    # Display cons
    print(f"\n{'‚îÄ'*80}")
    print(f"  ‚ùå CONS ({len(cons)})")
    print(f"{'‚îÄ'*80}")
    if cons:
        for i, con in enumerate(cons, 1):
            print(f"  {i}. {con}")
    else:
        print("  No cons identified")
    
    print(f"\n{'='*80}")
    
    return True

def test_step_8_run_simulation(session_id):
    """Step 8: Run matchup simulation"""
    print_section("STEP 8: RUN MATCHUP SIMULATION", "=")
    
    print("\nüìä Starting matchup projection simulation...")
    print("   Projecting next 3 weeks with/without trade...")
    
    try:
        response = requests.post(
            f"{BASE_URL}/api/trade-assistant/simulate",
            json={
                "session_id": session_id,
                "weeks_ahead": 3
            }
        )
        
        if response.status_code != 200:
            print(f"‚ùå FAILED: {response.text}")
            return None
        
        print(f"‚úÖ Simulation started!")
        print(f"   Waiting for background task to complete...")
        
        # Wait for simulation to complete
        time.sleep(5)
        
        # Fetch updated results
        response = requests.get(
            f"{BASE_URL}/api/trade-assistant/analysis/{session_id}"
        )
        
        if response.status_code == 200:
            data = response.json()
            simulation = data.get('simulation_result')
            
            if simulation:
                print(f"\n‚úÖ Simulation completed!")
                return simulation
            else:
                print(f"‚ö†Ô∏è  Simulation still processing...")
                return None
        
        return None
        
    except Exception as e:
        print(f"‚ùå ERROR: {str(e)}")
        return None

def test_step_9_display_simulation(simulation_result):
    """Step 9: Display simulation results"""
    print_section("STEP 9: VIEW SIMULATION RESULTS", "=")
    
    if not simulation_result:
        print("‚ö†Ô∏è  No simulation results available")
        return False
    
    without = simulation_result.get('without_trade', {})
    with_trade = simulation_result.get('with_trade', {})
    diff = simulation_result.get('point_differential', 0)
    
    print(f"\n{'='*80}")
    print(f"  MATCHUP PROJECTION (Next 3 Weeks)")
    print(f"{'='*80}")
    
    # Without trade
    print(f"\n  üìâ WITHOUT Trade:")
    print(f"     Projected Points: {without.get('projected_points', 'N/A'):.1f}")
    print(f"     Win Probability:  {without.get('win_probability', 0) * 100:.1f}%")
    
    # With trade
    print(f"\n  üìà WITH Trade:")
    print(f"     Projected Points: {with_trade.get('projected_points', 'N/A'):.1f}")
    print(f"     Win Probability:  {with_trade.get('win_probability', 0) * 100:.1f}%")
    
    # Differential
    print(f"\n  ‚öñÔ∏è  Trade Impact:")
    print(f"     Point Differential: {'+' if diff > 0 else ''}{diff:.1f}")
    
    if diff > 5:
        print(f"     ‚úÖ STRONG POSITIVE impact - Trade significantly improves your team")
    elif diff > 0:
        print(f"     ‚úÖ POSITIVE impact - Trade improves your team")
    elif diff > -5:
        print(f"     ‚ûñ NEUTRAL impact - Trade has minimal effect")
    else:
        print(f"     ‚ùå NEGATIVE impact - Trade weakens your team")
    
    print(f"\n{'='*80}")
    
    return True

def main():
    """Run complete end-to-end test"""
    print("\n" + "üèÄ"*40)
    print("  TRADE ASSISTANT - COMPLETE END-TO-END USER FLOW TEST")
    print("üèÄ"*40)
    print("\nSimulating user interaction with new UI improvements:")
    print("  ‚úì Team selection with proper names")
    print("  ‚úì Manual player selection (none pre-selected)")
    print("  ‚úì Clear all selections button")
    print("  ‚úì AI-powered analysis with LLM")
    print("  ‚úì Matchup simulation")
    
    start_time = time.time()
    
    # Step 1: Load teams
    rosters, user_map = test_step_1_load_teams()
    if not rosters:
        print("\n‚ùå TEST FAILED: Could not load teams")
        return
    
    # Step 2: Select opponent
    opponent_roster = test_step_2_select_opponent(rosters, user_map)
    if not opponent_roster:
        print("\n‚ùå TEST FAILED: Could not select opponent")
        return
    
    # Step 3: Fetch player details
    players = test_step_3_fetch_players(rosters, user_map)
    
    # Step 4: Select players
    players_out, players_in = test_step_4_select_players(rosters, opponent_roster, players)
    if not players_out or not players_in:
        print("\n‚ùå TEST FAILED: Could not select players")
        return
    
    # Step 5: Submit analysis
    session_id = test_step_5_submit_analysis(opponent_roster['roster_id'], players_out, players_in)
    if not session_id:
        print("\n‚ùå TEST FAILED: Could not submit analysis")
        return
    
    # Step 6: Wait for LLM analysis
    analysis_result = test_step_6_wait_for_analysis(session_id)
    if not analysis_result:
        print("\n‚ùå TEST FAILED: Analysis did not complete")
        return
    
    # Step 7: Display AI recommendations
    results_displayed = test_step_7_display_results(analysis_result)
    if not results_displayed:
        print("\n‚ùå TEST FAILED: Could not display results")
        return
    
    # Step 8: Run simulation
    simulation_result = test_step_8_run_simulation(session_id)
    
    # Step 9: Display simulation
    if simulation_result:
        test_step_9_display_simulation(simulation_result)
    
    # Final summary
    elapsed = time.time() - start_time
    
    print_section("TEST SUMMARY", "=")
    print(f"\n‚úÖ ALL TESTS PASSED!")
    print(f"\nüìä Test Statistics:")
    print(f"   Total Execution Time: {elapsed:.1f} seconds")
    print(f"   Teams Loaded: {len(rosters)}")
    print(f"   Players Analyzed: {len(players_out) + len(players_in)}")
    print(f"   Session ID: {session_id}")
    print(f"   Analysis Status: Completed")
    print(f"   Simulation Status: {'Completed' if simulation_result else 'Pending'}")
    
    print("\n‚ú® New UI Features Validated:")
    print("   ‚úì Team names display correctly (not just 'Team 1', 'Team 2')")
    print("   ‚úì Players not pre-selected by default")
    print("   ‚úì Clear all selections button available")
    print("   ‚úì LLM generates comprehensive analysis")
    print("   ‚úì Favorability score calculated")
    print("   ‚úì Pros and cons listed")
    print("   ‚úì Recommendation provided")
    print("   ‚úì Simulation projects matchup outcomes")
    
    print("\n" + "üèÄ"*40 + "\n")

if __name__ == "__main__":
    main()
